@page "/"

@using State
@using Const
@using MamasRezepte.Shared.Models
@using MamasRezepte.Shared.Helper
@using System.IO
@using Newtonsoft.Json

@implements IDisposable

@inject HttpClient Http
@inject NavigationManager Nav
@inject IToastService Toast
@inject DataStateMain State

<div style="padding-top: 32px; "></div>

@if (State.FFilter.IsEmpty())
{
    <div class="row d-flex justify-content-center" style="margin-bottom:48px;">
        <div class="col-12 col-sm-4">
            <div class="d-flex justify-content-center">
                <img src="/Assets/logo.png" alt="" style="height:150px;">
            </div>
        </div>
        <div class="col-12 col-sm-8">
            <h1 class="text-center text-sm-start" style="margin-bottom:12px; font-weight:bold;width:100%;">Mamas Rezepte</h1>
            @*<p class="text-center text-sm-start" style="color:gray; font-weight:bold; width:100%;"> Hier sind all die leckeren Rezepte von Mama gesammelt. Suche nach bestimmten Rezepten oder durchstöbere den Feed. Guten Appetit! :)</p>*@
        </div>
    </div>
}


@* SearchBar *@
<div style="margin-bottom: 64px;">
    <div class="p-2 rounded rounded-pill shadow mb-4">
        <div class="input-group">
            <input @bind="@FSearch" type="search" placeholder="Wonach suchst du?" aria-describedby="button-addon1" class="form-control border-0">
            <div class="input-group-append">
                <button @onclick="@(() => EditFilter(FSearch))" id="button-addon1" type="submit" class="btn btn-link" style="color:orange;"><i class="fa fa-search"></i></button>
                @*<button id="button-addon2" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="true" aria-controls="collapseExample" class="btn btn-link" style="color:orange;"><i class="fa fa-filter"></i></button>*@
                <button @onclick="CollapseFilter" id="button-addon2" type="button" class="btn btn-link" style="color:orange;"><i class="fa fa-filter"></i></button>
            </div>
        </div>
    </div>
</div>

@* Filter *@
<div class="collapse @(!FFilterCollapsed ? "show" : "")" style="margin-bottom:32px;margin-top:-32px;" id="collapseExample">
    <div class="card card-body">
        @if (FCategories != null && FDurationCategories != null && FTags != null)
        {
            <div>
                <a>Kategorien</a>
                @foreach (var hElement in FCategories)
                {
                    <div @onclick="@(() => EditFilter(hElement))" class="badge rounded-pill @(!FFilter.Contains(hElement) ? "bg-secondary" : "")" style="@(FFilter.Contains(hElement) ? "background:orange;" : "")">@hElement.Name</div>
                }
                <div class="dropdown-divider" style="margin-top:12px;"></div>
                <a>Dauer</a>
                @foreach (var hElement in FDurationCategories)
                {
                    <div @onclick="@(() => EditFilter(hElement))" class="badge rounded-pill @(!FFilter.Contains(hElement) ? "bg-secondary" : "")" style="@(FFilter.Contains(hElement) ? "background:orange;" : "")">@hElement.Name</div>
                }
                <div class="dropdown-divider" style="margin-top:12px;"></div>
                <a>Beliebte Tags</a>
                @foreach (var hElement in FTags)
                {
                    <div @onclick="@(() => EditFilter(hElement))" class="badge rounded-pill @(!FFilter.Contains(hElement) ? "bg-secondary" : "")" style="@(FFilter.Contains(hElement) ? "background:orange;" : "")">@hElement.Name</div>
                }
            </div>
        }

    </div>
</div>

@* Search parameters *@
@if (!State.FFilter.IsEmpty())
{
    <div class="" style="margin-bottom:32px; margin-top:-16px; padding-left:12px; padding-right:12px;">
        <div class="row text-end">
            <a @onclick="ClearSearch" class="pull-right clickable" style="color:dimgrey;"><i class="fa fa-times"></i></a>
        </div>

        <div class="row">
            <div class="col-12">
                <h2>Suche nach "@(State.FFilter.FSearch)"</h2>
            </div>
            <div class="col-12">
                @foreach (var hCategory in State.FFilter.FCategories)
                {
                    <div @onclick="@(() => EditFilter(hCategory))" class="badge rounded-pill" style="background:orange;">@hCategory.Name</div>
                }
                @foreach (var hDurationCategory in State.FFilter.FDurationCategories)
                {
                    <div @onclick="@(() => EditFilter(hDurationCategory))" class="badge rounded-pill" style="background:orange;">@hDurationCategory.Name</div>
                }
                @foreach (var hTag in State.FFilter.FTags)
                {
                    <div @onclick="@(() => EditFilter(hTag))" class="badge rounded-pill" style="background:orange;">@hTag.Name</div>
                }
            </div>
        </div>
    </div>
}

@* Masonry *@
@if (FFeed != null)
{
    <Masonry FElements="FFeed.AsEnumerable()" />
}


@code {

    private IEnumerable<Recipe> FFeed { get; set; }
    private IEnumerable<Category> FCategories { get; set; }
    private IEnumerable<Tag> FTags { get; set; }
    private IEnumerable<DurationCategory> FDurationCategories { get; set; }

    private Filter FFilter { get; set; }
    private string FSearch { get; set; }

    private bool FFilterCollapsed { get; set; } = true;

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFeed();

        FCategories = (await Http.GetFromJsonAsync<IEnumerable<Category>>(Path.Combine(Nav.BaseUri, "api/categories/")))
        .OrderBy(_ => _.Name);

        FTags = (await Http.GetFromJsonAsync<IEnumerable<Tag>>(Path.Combine(Nav.BaseUri, "api/Tags/ByUsageFrequency")))
            .OrderBy(_ => _.Name)
            .Take(15);

        FDurationCategories = await Http.GetFromJsonAsync<IEnumerable<DurationCategory>>(Path.Combine(Nav.BaseUri, "api/durationcategories/"));

        FFilter = new Filter();
    }

    private async Task LoadFeed()
    {
        if(State.FFilter.IsEmpty())
        {
            FFeed = (await Http.GetFromJsonAsync<IEnumerable<Recipe>>(Path.Combine(Nav.BaseUri, "api/recipes/feed")))
                .OrderByDescending(_ => FeedCalculator.CalculateScore(_.Clicks.ToList())).ToList();
        } else
        {
            FFeed = (await Http.GetFromJsonAsync<IEnumerable<Recipe>>(Path.Combine(Nav.BaseUri, "api/recipes")))
                .ToList()
                .Where(_ => _.Name.Contains(State.FFilter.FSearch)
                    || State.FFilter.FCategories.Any(_0 => _.Category.Name == _0.Name)
                    || State.FFilter.FDurationCategories.Any(_0 => _.DurationCategory.Name == _0.Name)
                    || State.FFilter.FTags.Select(_0 => _0.Name).Any(_0 => _.Tags.Select(_1 => _1.Tag.Name).Contains(_0)))
                //.Where(_ => _.Name.Contains(State.FFilter.FSearch))
                .ToList();
        }

        this.StateHasChanged();
    }

    private async Task EditFilter(object _Object)
    {
        if (!FFilter.Contains(_Object))
        {
            FFilter.AddToFilter(_Object);
        }
        else
        {
            FFilter.RemoveFromFilter(_Object);
        }

        State.UpdateFilter(FFilter);

        LoadFeed();

        State.OnChange += StateHasChanged;
        State.NotifyStateChanged();
        this.StateHasChanged();
    }

    private async Task ClearSearch()
    {
        FFilter.ClearFilter();
        FSearch = "";

        State.UpdateFilter(FFilter);

        LoadFeed();

        State.OnChange += StateHasChanged;
        State.NotifyStateChanged();
        this.StateHasChanged();

    }

    private void CollapseFilter()
    {
        FFilterCollapsed = !FFilterCollapsed;
        this.StateHasChanged();
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }


}
